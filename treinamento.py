import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics
from sklearn.metrics import confusion_matrix,accuracy_score,f1_score
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm
from sklearn.multiclass import OneVsRestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier

def decicionTree(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)
	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=tentativa)
	clf = DecisionTreeClassifier()
	clf = clf.fit(x_train,y_train)
	y_pred = clf.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = clf.predict(x_teste_virus)
	print(Y_pred_teste)

def naiv_bayes_classification(tentativa,path,path_teste):	
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)
	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = tentativa)
	sc = StandardScaler()
	x_train = sc.fit_transform(x_train)
	x_test = sc.transform(x_test)
	classifier = GaussianNB()
	classifier.fit(x_train, y_train)
	y_pred  =  classifier.predict(x_test)	
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = classifier.predict(x_teste_virus)
	print(Y_pred_teste)
	
	
	
def random_forest(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)
	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=tentativa)
	rfc = RandomForestClassifier()
	rfc.fit(x_train,y_train)
	y_pred = rfc.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = rfc.predict(x_teste_virus)
	print(Y_pred_teste)


def knn_5(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)

	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = tentativa)
	knn = KNeighborsClassifier(n_neighbors=5)
	knn.fit(x_train, y_train)
	y_pred = knn.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = knn.predict(x_teste_virus)
	print(Y_pred_teste)

	
	
def knn_3(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)

	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = tentativa)
	knn = KNeighborsClassifier(n_neighbors=3)
	knn.fit(x_train, y_train)
	y_pred = knn.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = knn.predict(x_teste_virus)
	print(Y_pred_teste)
	
	
def knn_7(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)

	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = tentativa)
	knn = KNeighborsClassifier(n_neighbors=7)
	knn.fit(x_train, y_train)
	y_pred = knn.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = knn.predict(x_teste_virus)
	print(Y_pred_teste)
	
	
def treinamento_svm(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)

	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = tentativa)
	clf = svm.SVC(kernel='sigmoid')
	clf.fit(x_train, y_train)
	y_pred = clf.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = clf.predict(x_teste_virus)
	print(Y_pred_teste)

def treinamento_svm_RBF(tentativa,path,path_teste):
	arquivo = pd.read_csv(path,low_memory=False,delimiter=";")
	arquivo['tipo'] = arquivo['tipo'].replace(['legitimo'],0)
	arquivo['tipo'] = arquivo['tipo'].replace(['malware'],1)

	arquivo = arquivo.drop('sha256', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res', axis=1)
	#arquivo = arquivo.drop('DOS_HEADER_e_res2', axis=1)
	
	
	
	x = arquivo.drop ('tipo', axis=1)
	y = arquivo['tipo']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = tentativa)
	clf = svm.SVC(kernel='rbf')
	clf.fit(x_train, y_train)
	y_pred = clf.predict(x_test)
	tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
	print(metrics.accuracy_score(y_test, y_pred),metrics.precision_score(y_test, y_pred),metrics.recall_score(y_test,y_pred),f1_score(y_test, y_pred),tn,fp,fn,tp)
	
	
	arquivo_teste = pd.read_csv(path_teste,low_memory=False,delimiter=";")
	arquivo_teste = arquivo_teste.drop('sha256', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res', axis=1)
	#arquivo_teste = arquivo_teste.drop('DOS_HEADER_e_res2', axis=1)
	x_teste_virus = arquivo_teste.drop ('tipo', axis=1)
	Y_pred_teste = clf.predict(x_teste_virus)
	print(Y_pred_teste)
	
	
tentativas = range(1,16)	

path = "D:\\scripts\\DADOS\\analises_dinamica_full.csv"
path_teste = "D:\\scripts\\DADOS\\analises_dinamica_virus.csv"

print("###################################SVM RBF")

for x in tentativas:	
	treinamento_svm_RBF(x,path,path_teste)

print("###################################SVM sigmoid")
	
for x in tentativas:	
	treinamento_svm(x,path,path_teste)



print("###################################KNN3")
	
for x in tentativas:	
	knn_3(x,path,path_teste)	
	
print("###################################KNN5")
	
for x in tentativas:	
	knn_5(x,path,path_teste)		
	
print("###################################KNN7")
	
for x in tentativas:	
	knn_7(x,path,path_teste)			
	
print("###################################decicionTree")	
for x in tentativas:	
	decicionTree(x,path,path_teste)
	
print("###################################naiv_bayes_classification")	
for x in tentativas:	
	naiv_bayes_classification(x,path,path_teste)
	
print("###################################random_forest")	
for x in tentativas:	
	random_forest(x,path,path_teste)	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

#x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = 2)
#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=1, stratify=y)
#clf = svm.SVC(kernel='rbf')
#clf.fit(x_train, y_train)
#y_pred = clf.predict(x_test)
#print((y_test['tipo'].values == '1').count())
#tn, fp, fn, tp = confusion_matrix(y_test , y_pred).ravel()
#print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
#print("Precision:",metrics.precision_score(y_test, y_pred))
#print("Recall:",metrics.recall_score(y_test,y_pred))
#print('F1 Score: %.3f' % f1_score(y_test, y_pred))
#print("True Negative (tn) : ",tn)
#print("False positive (fp) : ",fp)
#print("False negative (fn) : ",fn)
#print("True positive (tp) : ",tp)
#print(confusion_matrix(y_test , y_pred))